//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gestión_de_Recursos_Tecnológicos.src.entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Gestión_de_Recursos_TecnológicosEntities : DbContext
    {
        public Gestión_de_Recursos_TecnológicosEntities()
            : base("name=Gestión_de_Recursos_TecnológicosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CARACTERISTICA> CARACTERISTICAS { get; set; }
        public virtual DbSet<CENTRO_INVESTIGACION> CENTRO_INVESTIGACION { get; set; }
        public virtual DbSet<CIENTIFICO> CIENTIFICOS { get; set; }
        public virtual DbSet<DIRECTORE> DIRECTORES { get; set; }
        public virtual DbSet<DISPONIBILIDAD> DISPONIBILIDADs { get; set; }
        public virtual DbSet<ESTADO> ESTADOS { get; set; }
        public virtual DbSet<FACULTAD> FACULTADs { get; set; }
        public virtual DbSet<HISTORIAL_DIRECTORES> HISTORIAL_DIRECTORES { get; set; }
        public virtual DbSet<HISTORIAL_RECURSO_TECNOLOGICO> HISTORIAL_RECURSO_TECNOLOGICO { get; set; }
        public virtual DbSet<MANTENIMIENTO> MANTENIMIENTOes { get; set; }
        public virtual DbSet<MARCA> MARCAS { get; set; }
        public virtual DbSet<MODELO> MODELOS { get; set; }
        public virtual DbSet<PERMISO> PERMISOS { get; set; }
        public virtual DbSet<PERSONAL_CIENTIFICO> PERSONAL_CIENTIFICO { get; set; }
        public virtual DbSet<PERSONAL_CIENTIFICO_X_CENTRO_INVESTIGACION> PERSONAL_CIENTIFICO_X_CENTRO_INVESTIGACION { get; set; }
        public virtual DbSet<RECURSO_TECNOLOGICO_X_CARACTERISTICA> RECURSO_TECNOLOGICO_X_CARACTERISTICA { get; set; }
        public virtual DbSet<RECURSOS_TECNOLOGICOS> RECURSOS_TECNOLOGICOS { get; set; }
        public virtual DbSet<RESPONSABLES_TECNICOS> RESPONSABLES_TECNICOS { get; set; }
        public virtual DbSet<ROL_PERSONAL_CIENTIFICO> ROL_PERSONAL_CIENTIFICO { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TIPOS_MANTENIMIENTOS> TIPOS_MANTENIMIENTOS { get; set; }
        public virtual DbSet<TIPOS_RECURSOS_TECNOLOGICOS> TIPOS_RECURSOS_TECNOLOGICOS { get; set; }
        public virtual DbSet<TURNO> TURNOes { get; set; }
        public virtual DbSet<UNIDADES_MEDIDAS> UNIDADES_MEDIDAS { get; set; }
        public virtual DbSet<USUARIO> USUARIOS { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
